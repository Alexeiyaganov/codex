{"version":3,"sources":["webpack://codex/./public/app/js/modules/cPreview.js","webpack://codex/./public/app/js/modules/editor.js"],"names":["cPreview","show","output","holder","JSON","stringify","encodeHTMLEntities","stylize","innerHTML","string","replace","module","exports","CodexEditor","require","Header","SimpleImage","Quote","Marker","CodeTool","Delimiter","InlineCode","List","ceEditor","cdxEditor","settings","editorData","blocks","defaultEditorData","document","getElementById","output_id","console","log","warn","tools","image","header","class","inlineToolbar","config","placeholder","list","quote","quotePlaceholder","DEFAULT_QUOTE_PLACEHOLDER","captionPlaceholder","DEFAULT_CAPTION_PLACEHOLDER","code","shortcut","inlineCode","marker","delimiter","data","onReady","prepareEditor","onChange","previewData","type","text","level","saver","save","then","savedData","querySelector","click"],"mappings":"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","file":"codex-editor.bundle.js","sourcesContent":["/**\n * Module to compose output JSON preview\n */\nconst cPreview = (function () {\n\n    /**\n     * Shows JSON in pretty preview\n     * @param {object} output - what to show\n     * @param {Element} holder - where to show\n     */\n    function show(output, holder) {\n\n        /** Make JSON pretty */\n        output = JSON.stringify( output, null, 4 );\n        /** Encode HTML entities */\n        output = encodeHTMLEntities( output );\n        /** Stylize! */\n        output = stylize( output );\n        holder.innerHTML = output;\n\n    };\n\n    /**\n     * Converts '>', '<', '&' symbols to entities\n     */\n    function encodeHTMLEntities(string) {\n\n        return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n    }\n\n    /**\n     * Some styling magic\n     */\n    function stylize(string) {\n\n        /** Stylize JSON keys */\n        string = string.replace( /\"(\\w+)\"\\s?:/g, '\"<span class=sc_key>$1</span>\" :');\n        /** Stylize tool names */\n        string = string.replace( /\"(paragraph|quote|list|header|link|code|image|delimiter|raw)\"/g, '\"<span class=sc_toolname>$1</span>\"');\n        /** Stylize HTML tags */\n        string = string.replace( /(&lt;[\\/a-z]+(&gt;)?)/gi, '<span class=sc_tag>$1</span>' );\n        /** Stylize strings */\n        string = string.replace( /\"([^\"]+)\"/gi, '\"<span class=sc_attr>$1</span>\"' );\n        /** Boolean/Null */\n        string = string.replace( /\\b(true|false|null)\\b/gi, '<span class=sc_bool>$1</span>' );\n        return string;\n\n    }\n\n    return {\n        show : show\n    };\n\n})({});\n\nmodule.exports = cPreview;","'use strict';\n\nconst CodexEditor = require('codex.editor');\n/**\n * Require module to compose output JSON preview\n */\nconst cPreview = require('./cPreview');\n\n/**\n * Load Tools for the Editor\n */\nconst Header = require('codex.editor.header');\nconst SimpleImage = require('codex.editor.simple-image');\nconst Quote = require('codex.editor.quote');\nconst Marker = require('codex.editor.marker');\nconst CodeTool = require('codex.editor.code');\nconst Delimiter = require('codex.editor.delimiter');\nconst InlineCode = require('codex.editor.inline-code');\nconst List = require('codex.editor.list');\n\n/**\n * Editor instance\n */\nlet ceEditor;\n\n/**\n * Container to output saved Editor data\n */\nlet output;\n\nclass cdxEditor {\n\n    /**\n     * Initialize Editor with settings\n     * @param {Object} settings           - Editor's parameters\n     * @param {String} settings.output_id - ID of container where Editor's saved data will be shown\n     * @param {Object[]} settings.blocks  - Editor's blocks content\n     */\n    init(settings) {\n\n        /**\n         * Define content of Editor's blocks\n         * @type {Object|{blocks}}\n         */\n        const editorData = settings.blocks || this.defaultEditorData();\n\n        /**\n         * Define сontainer to output Editor saved data\n         * @type {HTMLElement}\n         */\n        output = document.getElementById(settings.output_id);\n\n        if (output) {\n\n            console.log('Output target with ID: «' + settings.output_id + '» was initialized successfully');\n\n        } else {\n\n            console.warn('Can\\'t find output target with ID: «' + settings.output_id + '»');\n\n        }\n\n        /**\n         * Instantiate new Editor with set of Tools\n         */\n\n        ceEditor = new CodexEditor({\n            tools: {\n                image: SimpleImage,\n\n                header: {\n                    class: Header,\n                    inlineToolbar: ['link', 'marker', 'bold'],\n                    config: {\n                        placeholder: 'Title'\n                    }\n                },\n\n                list: {\n                    class: List,\n                    inlineToolbar: true\n                },\n\n                quote: {\n                    class: Quote,\n                    inlineToolbar: true,\n                    config: {\n                        quotePlaceholder: Quote.DEFAULT_QUOTE_PLACEHOLDER,\n                        captionPlaceholder: Quote.DEFAULT_CAPTION_PLACEHOLDER\n                    }\n                },\n\n                code: {\n                    class: CodeTool,\n                    shortcut: 'CMD+SHIFT+D'\n                },\n\n                inlineCode: {\n                    class: InlineCode,\n                    shortcut: 'CMD+SHIFT+C'\n                },\n\n                marker: {\n                    class: Marker,\n                    shortcut: 'CMD+SHIFT+M'\n                },\n\n                delimiter: Delimiter,\n            },\n            data: {\n                blocks: editorData\n            },\n\n            onReady: () => {\n\n                this.prepareEditor();\n\n            },\n\n            onChange: () => {\n\n                this.previewData();\n\n            }\n        });\n\n    };\n\n    /**\n     * Define default Editor's data if none was passed\n     * @returns {Object[]} blocks\n     */\n    defaultEditorData() {\n\n        return {\n            blocks: [\n                {\n                    type: 'header',\n                    data: {\n                        text: '',\n                        level: 2\n                    }\n                }\n            ]\n        };\n\n    };\n\n    /**\n     * Shows JSON output of editor saved data\n     */\n    previewData() {\n\n        ceEditor.saver.save().then((savedData) => {\n\n            cPreview.show(savedData, output);\n\n        });\n\n    };\n\n    /**\n     * When editor is ready, trigger click inside editor to show toolbar\n     * Preview JSON output\n     */\n    prepareEditor() {\n\n        document.querySelector('.codex-editor__redactor').click();\n\n        this.previewData();\n\n    };\n\n};\n\nmodule.exports = new cdxEditor();"],"sourceRoot":""}